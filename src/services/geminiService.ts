import { GoogleGenerativeAI } from '@google/generative-ai';

// Configura√ß√£o da API do Gemini
const API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY || '';
const genAI = new GoogleGenerativeAI(API_KEY);

export interface StatusRequest {
  theme: string; // Mudan√ßa: agora √© tema em vez de texto
  style?: 'modern' | 'elegant' | 'minimalist' | 'vibrant' | 'dark';
  aspectRatio?: '9:16' | '1:1' | '16:9';
  backgroundColor?: string;
  textColor?: string;
  fontSize?: number;
  fontFamily?: string;
  includeHashtags?: boolean;
  includeComplementaryPhrase?: boolean;
}

export interface GeneratedContent {
  text: string;
  backgroundColor: string;
  textColor: string;
  fontSize: number;
  fontFamily: string;
}

export interface StatusResponse {
  imageUrl: string;
  generatedContent: GeneratedContent;
  metadata: {
    prompt: string;
    style: string;
    timestamp: number;
  };
}

class GeminiService {
  private textModel;
  private usedQuotes: Set<string> = new Set(); // Hist√≥rico de frases j√° usadas
  private maxHistorySize = 50; // M√°ximo de frases no hist√≥rico

  constructor() {
    // Usar o modelo mais recente dispon√≠vel
    this.textModel = genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });
    
    // Carregar hist√≥rico do localStorage se dispon√≠vel
    this.loadQuoteHistory();
  }

  /**
   * Carrega o hist√≥rico de frases do localStorage
   */
  private loadQuoteHistory(): void {
    try {
      if (typeof window !== 'undefined') {
        const saved = localStorage.getItem('statusai_used_quotes');
        if (saved) {
          const quotes = JSON.parse(saved);
          this.usedQuotes = new Set(quotes);
          console.log(`üìö Carregado hist√≥rico com ${this.usedQuotes.size} frases`);
        }
      }
    } catch (error) {
      console.warn('Erro ao carregar hist√≥rico de frases:', error);
    }
  }

  /**
   * Salva o hist√≥rico de frases no localStorage
   */
  private saveQuoteHistory(): void {
    try {
      if (typeof window !== 'undefined') {
        const quotes = Array.from(this.usedQuotes);
        localStorage.setItem('statusai_used_quotes', JSON.stringify(quotes));
        console.log(`üíæ Hist√≥rico salvo com ${quotes.length} frases`);
      }
    } catch (error) {
      console.warn('Erro ao salvar hist√≥rico de frases:', error);
    }
  }

  /**
   * Adiciona uma frase ao hist√≥rico e gerencia o tamanho m√°ximo
   */
  private addToHistory(quote: string): void {
    // Extrair apenas a parte principal da cita√ß√£o (sem autor)
    const mainQuote = quote.split('\n')[0].replace(/["""]/g, '').trim();
    
    this.usedQuotes.add(mainQuote);
    
    // Limitar o tamanho do hist√≥rico
    if (this.usedQuotes.size > this.maxHistorySize) {
      const quotesArray = Array.from(this.usedQuotes);
      // Remove as 10 mais antigas
      for (let i = 0; i < 10; i++) {
        this.usedQuotes.delete(quotesArray[i]);
      }
    }
    
    this.saveQuoteHistory();
  }

  /**
   * Verifica se uma frase j√° foi usada recentemente
   */
  private isQuoteUsed(quote: string): boolean {
    const mainQuote = quote.split('\n')[0].replace(/["""]/g, '').trim();
    return this.usedQuotes.has(mainQuote);
  }

  /**
   * Limpa o hist√≥rico de frases (√∫til para testes)
   */
  public clearQuoteHistory(): void {
    this.usedQuotes.clear();
    if (typeof window !== 'undefined') {
      localStorage.removeItem('statusai_used_quotes');
    }
    console.log('üóëÔ∏è Hist√≥rico de frases limpo');
  }

  /**
   * Retorna o hist√≥rico atual de frases (√∫til para debug)
   */
  public getQuoteHistory(): string[] {
    return Array.from(this.usedQuotes);
  }

  /**
   * Retorna estat√≠sticas do hist√≥rico
   */
  public getHistoryStats(): { total: number; maxSize: number; percentFull: number } {
    const total = this.usedQuotes.size;
    const percentFull = Math.round((total / this.maxHistorySize) * 100);
    return { total, maxSize: this.maxHistorySize, percentFull };
  }

  /**
   * Busca frases famosas em portugu√™s brasileiro usando a API do Gemini com base no tema fornecido pelo usu√°rio
   */
  private async generateContentWithGemini(theme: string, includeHashtags: boolean = true, includeComplementaryPhrase: boolean = true): Promise<GeneratedContent> {
    const maxRetries = 2;
    let lastError: Error | null = null;

    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        console.log(`Tentativa ${attempt}/${maxRetries} para o tema: ${theme}`);

        // Prompt otimizado para m√°xima efici√™ncia e qualidade
        // Adicionar varia√ß√£o para evitar repeti√ß√µes
        const randomSeed = Math.floor(Math.random() * 1000);
        const timeStamp = Date.now() % 1000;
        
        const prompt = `üéØ TEMA: "${theme}" (Sess√£o: ${randomSeed}-${timeStamp})

üìã MISS√ÉO: Encontre uma cita√ß√£o √öNICA sobre "${theme}". Varie sempre as respostas!

üîç REGRAS:
‚Ä¢ Temas b√≠blicos/religiosos ‚Üí Vers√≠culo b√≠blico REAL
‚Ä¢ Temas seculares ‚Üí Cita√ß√£o famosa REAL de autor reconhecido
‚Ä¢ OBRIGAT√ìRIO: Explore diferentes autores e perspectivas
‚Ä¢ NUNCA repita a mesma cita√ß√£o

‚úÖ ESPECIFICA√á√ïES:
‚Ä¢ Portugu√™s brasileiro perfeito
‚Ä¢ M√°ximo 80 caracteres na frase
‚Ä¢ 1 emoji apropriado
‚Ä¢ Conte√∫do real e verific√°vel
‚Ä¢ Sem hashtags

üìù FORMATO OBRIGAT√ìRIO:
"[Cita√ß√£o √∫nica]" [emoji]
[Autor/Refer√™ncia]

background: #[6 d√≠gitos]
text: #[6 d√≠gitos]
font: [Nome da Fonte]

üé® CORES POR TEMA:
‚Ä¢ Motiva√ß√£o: #e74c3c + #ffffff + Montserrat
‚Ä¢ Sucesso: #27ae60 + #ffffff + Poppins  
‚Ä¢ Amor: #8e44ad + #f8f9fa + Lato
‚Ä¢ Paz: #3498db + #ffffff + Inter
‚Ä¢ F√©: #2c3e50 + #ecf0f1 + Playfair Display
‚Ä¢ For√ßa: #d35400 + #ffffff + Roboto

üí° VARIE AS CITA√á√ïES - Exemplos de diversidade:

Para "motiva√ß√£o":
A) "O sucesso √© a soma de pequenos esfor√ßos repetidos." üí™ (Robert Collier)
B) "N√£o espere por oportunidades. Crie-as." üöÄ (George Bernard Shaw)  
C) "A disciplina √© a ponte entre metas e conquistas." ‚ö° (Jim Rohn)

üé≤ Use o ID ${randomSeed}-${timeStamp} para garantir resposta √∫nica.

‚ö†Ô∏è RETORNE APENAS o formato especificado.`;

        // Chamar a API do Gemini
        console.log(`üöÄ Enviando para Gemini (tema: "${theme}", tentativa ${attempt})`);
        
        const result = await this.textModel.generateContent(prompt);
        const response = await result.response;
        const rawText = response.text();

        console.log(`üì• Resposta bruta do Gemini:`, rawText);
        console.log(`üìè Tamanho da resposta: ${rawText.length} caracteres`);

        // Validar e melhorar a resposta
        const { text, backgroundColor, textColor, fontFamily } = this.validateAndImproveResponse(rawText, theme);
        
        console.log(`‚úÖ Texto final extra√≠do: "${text}"`);
        console.log(`üé® Cores: bg=${backgroundColor}, text=${textColor}`);

        // Verificar se a resposta √© v√°lida
        if (!text || text.length < 10) {
          throw new Error('Resposta muito curta ou inv√°lida');
        }

        console.log('Resposta processada com sucesso:', { text, backgroundColor, textColor, fontFamily });

        // Adicionar ao hist√≥rico para evitar repeti√ß√µes futuras
        this.addToHistory(text);

        return {
          text: text.trim(),
          backgroundColor,
          textColor,
          fontSize: 20,
          fontFamily
        };

      } catch (error) {
        console.error(`Erro na tentativa ${attempt}:`, error);
        lastError = error instanceof Error ? error : new Error('Erro desconhecido');

        if (attempt === maxRetries) {
          break; // Sair do loop se foi a √∫ltima tentativa
        }

        // Aguardar um pouco antes da pr√≥xima tentativa
        await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
      }
    }

    // Se chegou aqui, todas as tentativas falharam - usar fallback inteligente
    console.error('Todas as tentativas falharam. Usando fallback inteligente.', lastError);

    const colorPalette = this.generateColorPalette(theme);
    const themeWords = theme.toLowerCase();
    let fallbackText;

    // Fallback inteligente baseado no tema
    if (themeWords.includes('f√©') || themeWords.includes('fe') ||
      themeWords.includes('deus') || themeWords.includes('jesus') ||
      themeWords.includes('b√≠bli') || themeWords.includes('bibli') ||
      themeWords.includes('salm') || themeWords.includes('ora√ß√£o') ||
      themeWords.includes('oracao') || themeWords.includes('vers√≠')) {
      fallbackText = '"Tudo posso naquele que me fortalece." ‚ú®\nFilipenses 4:13';
    } else if (themeWords.includes('amor')) {
      fallbackText = '"O amor √© a √∫nica for√ßa capaz de transformar um inimigo em amigo." üíï\n(Martin Luther King Jr.)';
    } else if (themeWords.includes('sucesso') || themeWords.includes('vit√≥ria')) {
      fallbackText = '"O sucesso √© ir de fracasso em fracasso sem perder o entusiasmo." üåü\n(Winston Churchill)';
    } else if (themeWords.includes('paz')) {
      fallbackText = '"A paz n√£o pode ser mantida √† for√ßa; s√≥ pode ser alcan√ßada pela compreens√£o." ‚òÆÔ∏è\n(Albert Einstein)';
    } else {
      fallbackText = '"A persist√™ncia √© o caminho do √™xito." üåü\n(Charles Chaplin)';
    }

    // Adicionar ao hist√≥rico mesmo no fallback
    this.addToHistory(fallbackText);

    return {
      text: fallbackText,
      backgroundColor: colorPalette.backgroundColor,
      textColor: colorPalette.textColor,
      fontSize: 20,
      fontFamily: this.selectFont(theme, fallbackText)
    };
  }

  /**
   * Calcula o contraste entre duas cores usando a f√≥rmula de lumin√¢ncia relativa
   */
  private getContrastRatio(bgColor: string, textColor: string): number {
    const getLuminance = (hex: string): number => {
      const r = parseInt(hex.substr(1, 2), 16) / 255;
      const g = parseInt(hex.substr(3, 2), 16) / 255;
      const b = parseInt(hex.substr(5, 2), 16) / 255;

      const a = [r, g, b].map(v => {
        return (v <= 0.03928) ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
      });

      return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;
    };

    const bgLuminance = getLuminance(bgColor);
    const textLuminance = getLuminance(textColor);

    const lighter = Math.max(bgLuminance, textLuminance);
    const darker = Math.min(bgLuminance, textLuminance);

    return (lighter + 0.05) / (darker + 0.05);
  }

  /**
   * Seleciona a fonte mais apropriada baseada no tema e tipo de conte√∫do
   */
  private selectFont(theme: string, text: string): string {
    const themeWords = theme.toLowerCase();
    const textContent = text.toLowerCase();
    
    // Fontes b√≠blicas/espirituais - mais tradicionais e elegantes
    if (themeWords.includes('f√©') || themeWords.includes('fe') || 
        themeWords.includes('deus') || themeWords.includes('jesus') || 
        themeWords.includes('b√≠bli') || themeWords.includes('bibli') ||
        themeWords.includes('salm') || themeWords.includes('ora√ß√£o') ||
        themeWords.includes('oracao') || themeWords.includes('vers√≠') ||
        textContent.includes('filipenses') || textContent.includes('salmo') ||
        textContent.includes('prov√©rbios') || textContent.includes('jo√£o')) {
      return 'Playfair Display'; // Fonte elegante e tradicional
    }
    
    // Temas de amor/relacionamento - fonte mais suave
    if (themeWords.includes('amor') || themeWords.includes('cora√ß√£o') ||
        themeWords.includes('fam√≠lia') || themeWords.includes('amizade') ||
        textContent.includes('amor') || textContent.includes('cora√ß√£o')) {
      return 'Poppins'; // Fonte suave e amig√°vel
    }
    
    // Temas motivacionais/sucesso - fonte forte e moderna
    if (themeWords.includes('sucesso') || themeWords.includes('vit√≥ria') ||
        themeWords.includes('for√ßa') || themeWords.includes('foco') ||
        themeWords.includes('determina√ß√£o') || themeWords.includes('conquista') ||
        textContent.includes('sucesso') || textContent.includes('persist√™ncia')) {
      return 'Montserrat'; // Fonte forte e impactante
    }
    
    // Temas de paz/tranquilidade - fonte leve
    if (themeWords.includes('paz') || themeWords.includes('tranquil') ||
        themeWords.includes('calma') || themeWords.includes('serenidade') ||
        textContent.includes('paz') || textContent.includes('tranquil')) {
      return 'Lato'; // Fonte leve e harmoniosa
    }
    
    // Temas de gratid√£o/positividade - fonte calorosa
    if (themeWords.includes('gratid√£o') || themeWords.includes('gratitud') ||
        themeWords.includes('obrigad') || themeWords.includes('feliz') ||
        textContent.includes('grat') || textContent.includes('obrigad')) {
      return 'Open Sans'; // Fonte calorosa e acess√≠vel
    }
    
    // Cita√ß√µes de autores famosos - fonte cl√°ssica
    if (textContent.includes('einstein') || textContent.includes('gandhi') ||
        textContent.includes('jobs') || textContent.includes('churchill') ||
        textContent.includes('chaplin') || textContent.includes('luther')) {
      return 'Crimson Text'; // Fonte cl√°ssica para cita√ß√µes
    }
    
    // Padr√£o - fonte moderna e vers√°til
    return 'Inter';
  }

  /**
   * Gera uma paleta de cores harmoniosa com base em um tema
   */
  private generateColorPalette(theme: string): { backgroundColor: string; textColor: string } {
    // Paletas de cores pr√©-definidas para temas comuns
    const colorPalettes: Record<string, { backgroundColor: string; textColor: string }> = {
      'motiva√ß√£o': { backgroundColor: '#1a535c', textColor: '#f7fff7' },
      'amor': { backgroundColor: '#8e1e3d', textColor: '#ffebf0' },
      'sucesso': { backgroundColor: '#d4af37', textColor: '#000000' },
      'foco': { backgroundColor: '#2c3e50', textColor: '#ecf0f1' },
      'gratid√£o': { backgroundColor: '#27ae60', textColor: '#f8f9f9' },
      'paz': { backgroundColor: '#3498db', textColor: '#ffffff' },
      'for√ßa': { backgroundColor: '#e74c3c', textColor: '#ffffff' },
      'esperan√ßa': { backgroundColor: '#f39c12', textColor: '#2c3e50' },
      'b√≠blia': { backgroundColor: '#1a3c6c', textColor: '#fff8e1' },
      'biblia': { backgroundColor: '#1a3c6c', textColor: '#fff8e1' },
      'vers√≠culo': { backgroundColor: '#4a235a', textColor: '#f9e79f' },
      'versiculo': { backgroundColor: '#4a235a', textColor: '#f9e79f' },
      'cap√≠tulo': { backgroundColor: '#5d4037', textColor: '#ffffff' },
      'capitulo': { backgroundColor: '#5d4037', textColor: '#ffffff' },
      'deus': { backgroundColor: '#1a3c6c', textColor: '#fff8e1' },
      'cristo': { backgroundColor: '#8e1e3d', textColor: '#ffebf0' },
      'jesus': { backgroundColor: '#8e1e3d', textColor: '#ffebf0' },
      'f√©': { backgroundColor: '#4a235a', textColor: '#f9e79f' },
      'fe': { backgroundColor: '#4a235a', textColor: '#f9e79f' },
      'ora√ß√£o': { backgroundColor: '#1a3c6c', textColor: '#fff8e1' },
      'oracao': { backgroundColor: '#1a3c6c', textColor: '#fff8e1' },
      'salmo': { backgroundColor: '#5d4037', textColor: '#ffffff' },
      'salmos': { backgroundColor: '#5d4037', textColor: '#ffffff' },
      'prov√©rbios': { backgroundColor: '#d4af37', textColor: '#1a1a1a' },
      'proverbios': { backgroundColor: '#d4af37', textColor: '#1a1a1a' },
      'default': { backgroundColor: '#2c3e50', textColor: '#ecf0f1' }
    };

    // Normalizar o tema para encontrar a paleta correspondente
    const normalizedTheme = theme.toLowerCase();

    // Procurar por tema exato
    for (const [key, palette] of Object.entries(colorPalettes)) {
      if (key !== 'default' && normalizedTheme.includes(key)) {
        return palette;
      }
    }

    // Retornar paleta padr√£o se n√£o encontrar correspond√™ncia
    return colorPalettes.default;
  }

  private getContrastingTextColor(backgroundColor: string): string {
    const colorValue = parseInt(backgroundColor.replace('#', ''), 16);
    const r = (colorValue >> 16) & 255;
    const g = (colorValue >> 8) & 255;
    const b = colorValue & 255;
    const yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;
    return (yiq >= 128) ? '#000000' : '#FFFFFF';
  }

  /**
   * Busca conte√∫do de cita√ß√µes famosas em portugu√™s brasileiro baseado no tema
   */
  private async generateContentFromTheme(theme: string, includeHashtags?: boolean, includeComplementaryPhrase?: boolean): Promise<GeneratedContent> {
    // Usar a API do Gemini para buscar cita√ß√µes famosas em vez de gerar conte√∫do
    return await this.generateContentWithGemini(theme, includeHashtags, includeComplementaryPhrase);
  }

  /**
   * Gera uma imagem de status usando cita√ß√µes famosas em portugu√™s brasileiro baseado no tema
   */
  async generateStatus(request: StatusRequest): Promise<StatusResponse> {
    try {
      console.log('Gerando status com request:', request);

      // Valida√ß√£o b√°sica
      if (!request.theme.trim()) {
        throw new Error('Tema √© obrigat√≥rio para gerar o status');
      }

      // Gerar conte√∫do autom√°tico baseado no tema
      const generatedContent = await this.generateContentFromTheme(
        request.theme,
        request.includeHashtags,
        request.includeComplementaryPhrase
      );
      console.log('Conte√∫do gerado:', generatedContent);

      // Criar request completo com conte√∫do gerado
      const fullRequest = {
        ...request,
        text: generatedContent.text,
        backgroundColor: generatedContent.backgroundColor,
        textColor: generatedContent.textColor,
        fontSize: generatedContent.fontSize,
        fontFamily: generatedContent.fontFamily
      };

      const prompt = `Tema: ${request.theme} - ${generatedContent.text}`;
      console.log('Prompt completo:', prompt);

      // Gerar imagem com Gemini ou placeholder
      const imageUrl = await this.generateImageWithGemini(fullRequest, prompt);
      console.log('URL da imagem:', imageUrl);

      return {
        imageUrl,
        generatedContent,
        metadata: {
          prompt,
          style: request.style || 'modern',
          timestamp: Date.now(),
        },
      };
    } catch (error) {
      console.error('Erro ao gerar status:', error);
      throw new Error(`Falha na gera√ß√£o: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
    }
  }

  /**
   * Gera uma imagem usando a API do Gemini ou placeholder como fallback
   */
  private async generateImageWithGemini(request: any, prompt: string): Promise<string> {
    try {
      console.log('Gerando imagem com request:', request);
      console.log('Prompt:', prompt);

      // Tentar usar a API do Gemini para gera√ß√£o de imagens
      // Por enquanto, ainda usando placeholder como fallback
      // Mas estruturado para f√°cil integra√ß√£o futura

      // Simular delay da API
      await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 2000));

      // Encode do texto para URL
      const encodedText = encodeURIComponent(request.text);
      const bgColor = (request.backgroundColor || '#1E1E1E').replace('#', '');
      const textColor = (request.textColor || '#FFFFFF').replace('#', '');

      // Usar um servi√ßo de placeholder mais avan√ßado
      const width = 360;
      const height = 640;

      const imageUrl = `https://placehold.co/${width}x${height}/${bgColor}/${textColor}?text=${encodedText}`;
      console.log('URL da imagem gerada:', imageUrl);

      return imageUrl;
    } catch (error) {
      console.error('Erro ao gerar imagem com Gemini:', error);
      // Fallback para placeholder b√°sico
      const width = 360;
      const height = 640;
      const bgColor = (request.backgroundColor || '#1E1E1E').replace('#', '');
      const textColor = (request.textColor || '#FFFFFF').replace('#', '');
      const encodedText = encodeURIComponent("Status gerado");

      return `https://placehold.co/${width}x${height}/${bgColor}/${textColor}?text=${encodedText}`;
    }
  }

  /**
   * Obt√©m par√¢metros de estilo para o placeholder
   */
  private getStyleParams(style: string) {
    const styles = {
      modern: { font: 'Inter' },
      elegant: { font: 'Playfair' },
      minimalist: { font: 'Helvetica' },
      vibrant: { font: 'Roboto' },
      dark: { font: 'Inter' },
    };

    return styles[style as keyof typeof styles] || styles.modern;
  }

  /**
   * Gera varia√ß√µes de um status
   */
  async generateVariations(baseRequest: StatusRequest, count: number = 3): Promise<StatusResponse[]> {
    const variations = [];
    const styles: Array<StatusRequest['style']> = ['modern', 'elegant', 'minimalist', 'vibrant'];

    for (let i = 0; i < count; i++) {
      const variationRequest = {
        ...baseRequest,
        style: styles[i % styles.length],
      };

      const variation = await this.generateStatus(variationRequest);
      variations.push(variation);
    }

    return variations;
  }

  /**
   * Valida configura√ß√µes antes de gerar
   */
  validateRequest(request: StatusRequest): { valid: boolean; errors: string[] } {
    const errors: string[] = [];

    if (!request.theme || request.theme.trim().length === 0) {
      errors.push('Tema √© obrigat√≥rio');
    }

    if (request.theme && request.theme.length > 50) {
      errors.push('Tema muito longo (m√°ximo 50 caracteres)');
    }

    return {
      valid: errors.length === 0,
      errors,
    };
  }

  /**
   * Obt√©m hist√≥rico de gerac√µes (para implementa√ß√£o futura)
   */
  async getHistory(): Promise<StatusResponse[]> {
    // Implementar com localStorage ou backend
    const history = localStorage.getItem('statusai_history');
    return history ? JSON.parse(history) : [];
  }

  /**
   * Salva no hist√≥rico (para implementa√ß√£o futura)
   */
  async saveToHistory(status: StatusResponse): Promise<void> {
    try {
      const history = await this.getHistory();
      history.unshift(status);

      // Manter apenas os √∫ltimos 50 itens
      const trimmedHistory = history.slice(0, 50);
      localStorage.setItem('statusai_history', JSON.stringify(trimmedHistory));
    } catch (error) {
      console.error('Erro ao salvar no hist√≥rico:', error);
      // N√£o lan√ßar erro pois isso n√£o deve impedir a gera√ß√£o do status
    }
  }

  /**
   * Extrai e valida cores e fonte do texto gerado pelo Gemini
   */
  private extractColorsAndFontFromText(text: string): { text: string; backgroundColor: string; textColor: string; fontFamily: string } {
    const lines = text.split('\n').map(line => line.trim()).filter(line => line);
    let extractedText = '';
    let backgroundColor = '';
    let textColor = '';
    let fontFamily = '';

    const backgroundRegex = /background:\s*(#[0-9a-fA-F]{6})/i;
    const textRegex = /text:\s*(#[0-9a-fA-F]{6})/i;
    const fontRegex = /font:\s*([^,\n]+)/i;

    lines.forEach(line => {
      const bgMatch = line.match(backgroundRegex);
      const textMatch = line.match(textRegex);
      const fontMatch = line.match(fontRegex);

      if (bgMatch) {
        backgroundColor = bgMatch[1].toUpperCase();
      } else if (textMatch) {
        textColor = textMatch[1].toUpperCase();
      } else if (fontMatch) {
        fontFamily = fontMatch[1].trim();
      } else if (!line.includes('background:') && !line.includes('text:') && !line.includes('font:')) {
        extractedText += line + '\n';
      }
    });

    // Validar contraste das cores extra√≠das
    if (backgroundColor && textColor) {
      const contrast = this.getContrastRatio(backgroundColor, textColor);
      if (contrast < 4.5) {
        console.warn(`Contraste baixo detectado (${contrast.toFixed(2)}). Ajustando cores...`);
        if (backgroundColor.startsWith('#F') || backgroundColor.startsWith('#E') || backgroundColor.startsWith('#D')) {
          textColor = '#1A1A1A';
        } else {
          textColor = '#FFFFFF';
        }
      }
    }

    return {
      text: extractedText.trim(),
      backgroundColor,
      textColor,
      fontFamily,
    };
  }

  /**
   * Valida e melhora a resposta do Gemini
   */
  private validateAndImproveResponse(rawResponse: string, theme: string): { text: string; backgroundColor: string; textColor: string; fontFamily: string } {
    let { text, backgroundColor, textColor, fontFamily } = this.extractColorsAndFontFromText(rawResponse);

    // Limpar texto de poss√≠veis artefatos
    text = text
      .replace(/^["']|["']$/g, '') // Remove aspas do in√≠cio/fim
      .replace(/\s+/g, ' ') // Normaliza espa√ßos
      .trim();

    // Detectar se √© sempre a mesma resposta repetitiva ou j√° foi usada
    if (text.includes('Acredite que voc√™ pode') || text.includes('Theodore Roosevelt') || this.isQuoteUsed(text)) {
      if (this.isQuoteUsed(text)) {
        console.warn('üîÑ Frase j√° foi usada recentemente. Buscando alternativa...');
      } else {
        console.warn('‚ö†Ô∏è Detectada resposta repetitiva do Gemini. For√ßando varia√ß√£o...');
      }
      text = this.getAlternativeQuote(theme);
    }

    // Validar comprimento do texto
    if (text.length > 200) {
      console.warn('Texto muito longo, truncando...');
      text = text.substring(0, 197) + '...';
    }

    // Garantir que temos cores v√°lidas
    if (!backgroundColor || !textColor) {
      const fallbackColors = this.generateColorPalette(theme);
      backgroundColor = backgroundColor || fallbackColors.backgroundColor;
      textColor = textColor || fallbackColors.textColor;
    }

    // Validar formato das cores
    const colorRegex = /^#[0-9A-F]{6}$/i;
    if (!colorRegex.test(backgroundColor)) {
      backgroundColor = '#2C3E50';
    }
    if (!colorRegex.test(textColor)) {
      textColor = '#ECF0F1';
    }

    // Garantir que temos uma fonte v√°lida
    if (!fontFamily) {
      fontFamily = this.selectFont(theme, text);
    }

    // Validar se a fonte √© uma das permitidas
    const allowedFonts = ['Inter', 'Playfair Display', 'Montserrat', 'Poppins', 'Lato', 'Open Sans', 'Crimson Text'];
    if (!allowedFonts.includes(fontFamily)) {
      fontFamily = this.selectFont(theme, text);
    }

    return { text, backgroundColor, textColor, fontFamily };
  }

  /**
   * Retorna uma cita√ß√£o alternativa para evitar repeti√ß√µes, verificando o hist√≥rico
   */
  private getAlternativeQuote(theme: string): string {
    const themeWords = theme.toLowerCase();
    let availableQuotes: string[] = [];
    
    if (themeWords.includes('motiva√ß√£o') || themeWords.includes('motivacao')) {
      availableQuotes = [
        '"O sucesso √© a soma de pequenos esfor√ßos repetidos." üí™\n(Robert Collier)',
        '"N√£o espere por oportunidades. Crie-as." üöÄ\n(George Bernard Shaw)',
        '"A disciplina √© a ponte entre metas e conquistas." ‚ö°\n(Jim Rohn)',
        '"O √∫nico modo de fazer um excelente trabalho √© amar o que faz." ‚ú®\n(Steve Jobs)',
        '"Grandes realiza√ß√µes requerem grandes ambi√ß√µes." üåü\n(Her√°clito)',
        '"A motiva√ß√£o √© o que te faz come√ßar. O h√°bito √© o que te mant√©m." üî•\n(Jim Ryun)',
        '"Voc√™ √© mais corajoso do que acredita, mais forte do que parece." üí™\n(A.A. Milne)',
        '"O futuro pertence √†queles que acreditam na beleza de seus sonhos." ‚ú®\n(Eleanor Roosevelt)'
      ];
    } else if (themeWords.includes('sucesso')) {
      availableQuotes = [
        '"O sucesso √© ir de fracasso em fracasso sem perder o entusiasmo." üåü\n(Winston Churchill)',
        '"O sucesso n√£o √© final, o fracasso n√£o √© fatal." üí™\n(Winston Churchill)',
        '"O sucesso √© 1% inspira√ß√£o e 99% transpira√ß√£o." ‚ö°\n(Thomas Edison)',
        '"A persist√™ncia √© o caminho do √™xito." üöÄ\n(Charles Chaplin)',
        '"O sucesso √© a soma de pequenos esfor√ßos repetidos dia ap√≥s dia." üìà\n(Robert Collier)',
        '"N√£o me√ßa o sucesso pelo que voc√™ conquistou, mas pelos obst√°culos que superou." üèÜ\n(Booker T. Washington)'
      ];
    } else if (themeWords.includes('amor')) {
      availableQuotes = [
        '"O amor √© a √∫nica for√ßa capaz de transformar um inimigo em amigo." üíï\n(Martin Luther King Jr.)',
        '"Onde h√° amor, h√° vida." ‚ù§Ô∏è\n(Mahatma Gandhi)',
        '"O amor n√£o consiste em olhar um para o outro, mas em olhar juntos na mesma dire√ß√£o." üíñ\n(Antoine de Saint-Exup√©ry)',
        '"Amar n√£o √© olhar um para o outro, √© olhar juntos na mesma dire√ß√£o." üíù\n(Antoine de Saint-Exup√©ry)',
        '"O amor √© a ponte entre duas almas." üíû\n(Rumi)'
      ];
    } else if (themeWords.includes('paz')) {
      availableQuotes = [
        '"A paz n√£o pode ser mantida √† for√ßa; s√≥ pode ser alcan√ßada pela compreens√£o." ‚òÆÔ∏è\n(Albert Einstein)',
        '"N√£o h√° caminho para a paz; a paz √© o caminho." üïäÔ∏è\n(Mahatma Gandhi)',
        '"A paz come√ßa com um sorriso." üòä\n(Madre Teresa)',
        '"A paz interior √© o novo sucesso." üßò\n(Jewel)',
        '"Cultive a paz interior e ela se espalhar√° naturalmente." ‚ú®\n(Dalai Lama)'
      ];
    } else {
      // Fallback geral com mais op√ß√µes
      availableQuotes = [
        '"A persist√™ncia √© o caminho do √™xito." üåü\n(Charles Chaplin)',
        '"O √∫nico modo de fazer um excelente trabalho √© amar o que faz." ‚ú®\n(Steve Jobs)',
        '"Grandes realiza√ß√µes requerem grandes ambi√ß√µes." üí™\n(Her√°clito)',
        '"A vida √© 10% o que acontece com voc√™ e 90% como voc√™ reage." üöÄ\n(Charles Swindoll)',
        '"O futuro depende do que voc√™ faz hoje." ‚ö°\n(Mahatma Gandhi)',
        '"Seja a mudan√ßa que voc√™ quer ver no mundo." üåç\n(Mahatma Gandhi)',
        '"A jornada de mil milhas come√ßa com um √∫nico passo." üë£\n(Lao Tzu)',
        '"Acredite em si mesmo e tudo ser√° poss√≠vel." üåü\n(An√¥nimo)'
      ];
    }
    
    // Filtrar cita√ß√µes que n√£o foram usadas recentemente
    const unusedQuotes = availableQuotes.filter(quote => !this.isQuoteUsed(quote));
    
    // Se todas foram usadas, usar qualquer uma (resetar ciclo)
    const quotesToUse = unusedQuotes.length > 0 ? unusedQuotes : availableQuotes;
    
    const selectedQuote = quotesToUse[Math.floor(Math.random() * quotesToUse.length)];
    
    console.log(`üé≤ Selecionada cita√ß√£o alternativa: ${unusedQuotes.length}/${availableQuotes.length} dispon√≠veis`);
    
    return selectedQuote;
  }
}

// Inst√¢ncia singleton
export const geminiService = new GeminiService();

// Hook para usar o servi√ßo em React
export const useGeminiService = () => {
  return geminiService;
};